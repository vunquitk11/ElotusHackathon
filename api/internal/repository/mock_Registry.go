package repository

import (
	"github.com/petme/api/internal/repository/file"
	"github.com/petme/api/internal/repository/user"
	"github.com/stretchr/testify/mock"
)

// MockRegistry is an autogenerated mock type for the Registry type
type MockRegistry struct {
	mock.Mock
}

// User provides a mock function with given fields:
func (_m *MockRegistry) User() user.Repository {
	ret := _m.Called()

	var r0 user.Repository
	if rf, ok := ret.Get(0).(func() user.Repository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(user.Repository)
		}
	}

	return r0
}

// File provides a mock function with given fields:
func (_m *MockRegistry) File() file.Repository {
	ret := _m.Called()

	var r0 file.Repository
	if rf, ok := ret.Get(0).(func() file.Repository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(file.Repository)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockRegistry interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRegistry creates a new instance of MockRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRegistry(t mockConstructorTestingTNewMockRegistry) *MockRegistry {
	mock := &MockRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
